--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_WIDTHA=12 LPM_WIDTHB=17 LPM_WIDTHP=29 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 10.1SP1 cbx_cycloneii 2011:01:19:21:13:40:SJ cbx_lpm_add_sub 2011:01:19:21:13:40:SJ cbx_lpm_mult 2011:01:19:21:13:40:SJ cbx_mgl 2011:01:19:21:15:40:SJ cbx_padd 2011:01:19:21:13:40:SJ cbx_stratix 2011:01:19:21:13:40:SJ cbx_stratixii 2011:01:19:21:13:40:SJ cbx_util_mgl 2011:01:19:21:13:40:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 286 
SUBDESIGN mult_aml
( 
	dataa[11..0]	:	input;
	datab[16..0]	:	input;
	result[28..0]	:	output;
) 
VARIABLE
	add11_result[31..0]	:	WIRE;
	add15_result[28..0]	:	WIRE;
	add19_result[25..0]	:	WIRE;
	add23_result[20..0]	:	WIRE;
	add27_result[14..0]	:	WIRE;
	add31_result[9..0]	:	WIRE;
	add35_result[6..0]	:	WIRE;
	cs2a[6..0] : carry_sum;
	cs3a[6..0] : carry_sum;
	le10a[17..0] : lcell;
	le4a[18..0] : lcell;
	le5a[18..0] : lcell;
	le6a[18..0] : lcell;
	le7a[18..0] : lcell;
	le8a[18..0] : lcell;
	le9a[18..0] : lcell;
	sft12a[31..0] : soft;
	sft13a[31..0] : soft;
	sft14a[31..0] : soft;
	sft16a[28..0] : soft;
	sft17a[28..0] : soft;
	sft18a[28..0] : soft;
	sft20a[25..0] : soft;
	sft21a[25..0] : soft;
	sft22a[25..0] : soft;
	sft24a[20..0] : soft;
	sft25a[20..0] : soft;
	sft26a[20..0] : soft;
	sft28a[14..0] : soft;
	sft29a[14..0] : soft;
	sft30a[14..0] : soft;
	sft32a[9..0] : soft;
	sft33a[9..0] : soft;
	sft34a[9..0] : soft;
	sft36a[6..0] : soft;
	sft37a[6..0] : soft;
	sft38a[6..0] : soft;
	dataa_node[16..0]	: WIRE;
	datab_node[11..0]	: WIRE;
	final_result_node[28..0]	: WIRE;
	w1059w[31..0]	: WIRE;
	w168w[18..0]	: WIRE;
	w18w[13..0]	: WIRE;
	w241w[18..0]	: WIRE;
	w298w[18..0]	: WIRE;
	w370w[18..0]	: WIRE;
	w442w[18..0]	: WIRE;
	w615w	: WIRE;
	w649w	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	add19_result[] = sft20a[].out + sft21a[].out;
	add23_result[] = sft24a[].out + sft25a[].out;
	add27_result[] = sft28a[].out + sft29a[].out;
	add31_result[] = sft32a[].out + sft33a[].out;
	add35_result[] = sft36a[].out + sft37a[].out;
	cs2a[].cin = ( ((w18w[12..12] & cs2a[5].cout) # w18w[13..13]), (cs2a[4].cout & w18w[10..10]), ((w18w[8..8] & cs2a[3].cout) # w18w[9..9]), ((w18w[6..6] & cs2a[2].cout) # w18w[7..7]), ((w18w[4..4] & cs2a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs2a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs2a[].sin = ( ((((((! w18w[13..13]) & w18w[12..12]) & cs2a[5].cout) # ((w18w[13..13] & w18w[12..12]) & (! cs2a[5].cout))) # ((w18w[13..13] & (! w18w[12..12])) & cs2a[5].cout)) # ((w18w[13..13] & (! w18w[12..12])) & (! cs2a[5].cout))), (cs2a[4].cout & w18w[10..10]), ((((((! w18w[9..9]) & w18w[8..8]) & cs2a[3].cout) # ((w18w[9..9] & w18w[8..8]) & (! cs2a[3].cout))) # ((w18w[9..9] & (! w18w[8..8])) & cs2a[3].cout)) # ((w18w[9..9] & (! w18w[8..8])) & (! cs2a[3].cout))), ((((((! w18w[7..7]) & w18w[6..6]) & cs2a[2].cout) # ((w18w[7..7] & w18w[6..6]) & (! cs2a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs2a[2].cout)) # ((w18w[7..7] & (! w18w[6..6])) & (! cs2a[2].cout))), ((((((! w18w[5..5]) & w18w[4..4]) & cs2a[1].cout) # ((w18w[5..5] & w18w[4..4]) & (! cs2a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs2a[1].cout)) # ((w18w[5..5] & (! w18w[4..4])) & (! cs2a[1].cout))), ((((((! w18w[3..3]) & w18w[2..2]) & cs2a[0].cout) # ((w18w[3..3] & w18w[2..2]) & (! cs2a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs2a[0].cout)) # ((w18w[3..3] & (! w18w[2..2])) & (! cs2a[0].cout))), w18w[1..1]);
	cs3a[].cin = ( ((w18w[12..12] & cs3a[5].cout) # w18w[13..13]), (cs3a[4].cout $ w18w[10..10]), ((w18w[8..8] & cs3a[3].cout) # w18w[9..9]), ((w18w[6..6] & cs3a[2].cout) # w18w[7..7]), ((w18w[4..4] & cs3a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs3a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs3a[].sin = ( ((((((! w18w[13..13]) & (! w18w[12..12])) & cs3a[5].cout) # (((! w18w[13..13]) & w18w[12..12]) & (! cs3a[5].cout))) # ((w18w[13..13] & w18w[12..12]) & (! cs3a[5].cout))) # ((w18w[13..13] & (! w18w[12..12])) & cs3a[5].cout)), (cs3a[4].cout $ w18w[10..10]), ((((((! w18w[9..9]) & (! w18w[8..8])) & cs3a[3].cout) # (((! w18w[9..9]) & w18w[8..8]) & (! cs3a[3].cout))) # ((w18w[9..9] & w18w[8..8]) & (! cs3a[3].cout))) # ((w18w[9..9] & (! w18w[8..8])) & cs3a[3].cout)), ((((((! w18w[7..7]) & (! w18w[6..6])) & cs3a[2].cout) # (((! w18w[7..7]) & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs3a[2].cout)), ((((((! w18w[5..5]) & (! w18w[4..4])) & cs3a[1].cout) # (((! w18w[5..5]) & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs3a[1].cout)), ((((((! w18w[3..3]) & (! w18w[2..2])) & cs3a[0].cout) # (((! w18w[3..3]) & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs3a[0].cout)), w18w[0..0]);
	le10a[].in = (w18w[11..11] & ( B"0", dataa_node[]));
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[0].sout) & cs3a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[1].sout) & cs3a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[1].sout)) & cs3a[1].sout)))));
	le6a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[2].sout) & (! cs3a[2].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[2].sout) & cs3a[2].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[2].sout)) & cs3a[2].sout)))));
	le7a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[3].sout) & (! cs3a[3].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[3].sout) & cs3a[3].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[3].sout)) & cs3a[3].sout)))));
	le8a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[4].sout) & (! cs3a[4].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[4].sout) & cs3a[4].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[4].sout)) & cs3a[4].sout)))));
	le9a[].in = ((cs2a[5].sout & ( B"0", dataa_node[], B"0")) # (cs3a[5].sout & ( B"0", B"0", dataa_node[])));
	sft12a[].in = ( w615w, ( w615w, ( sft18a[27..27].out, ( sft18a[26..26].out, ( sft18a[25..25].out, ( sft18a[24..24].out, ( sft18a[23..23].out, ( sft18a[22..22].out, ( sft18a[21..21].out, ( sft18a[20..20].out, ( sft18a[19..19].out, ( sft18a[18..18].out, ( sft18a[17..17].out, ( sft18a[16..16].out, ( sft18a[15..15].out, ( sft18a[14..14].out, ( sft18a[13..13].out, ( sft18a[12..12].out, ( sft18a[11..11].out, ( sft18a[10..10].out, ( sft18a[9..9].out, ( sft18a[8..8].out, ( sft18a[7..7].out, ( sft18a[6..6].out, ( sft18a[5..5].out, ( sft18a[4..4].out, ( sft18a[3..3].out, ( sft18a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out)))))))))))))))))))))))))))))));
	sft13a[].in = ( w649w, ( sft18a[28..28].out, ( sft22a[25..25].out, ( sft22a[24..24].out, ( sft22a[23..23].out, ( sft22a[22..22].out, ( sft22a[21..21].out, ( sft22a[20..20].out, ( sft22a[19..19].out, ( sft22a[18..18].out, ( sft22a[17..17].out, ( sft22a[16..16].out, ( sft22a[15..15].out, ( sft22a[14..14].out, ( sft22a[13..13].out, ( sft22a[12..12].out, ( sft22a[11..11].out, ( sft22a[10..10].out, ( sft22a[9..9].out, ( sft22a[8..8].out, ( sft22a[7..7].out, ( sft22a[6..6].out, ( sft22a[5..5].out, ( sft22a[4..4].out, ( sft22a[3..3].out, ( sft22a[2..2].out, ( sft22a[1..1].out, ( sft22a[0..0].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( w649w, cs2a[0].sout)))))))))))))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w649w, ( w615w, ( le10a[17..17].out, ( le10a[16..16].out, ( le10a[15..15].out, ( le10a[14..14].out, ( le10a[13..13].out, ( le10a[12..12].out, ( le10a[11..11].out, ( le10a[10..10].out, ( sft26a[14..14].out, ( sft26a[13..13].out, ( sft26a[12..12].out, ( sft26a[11..11].out, ( sft26a[10..10].out, ( sft26a[9..9].out, ( sft26a[8..8].out, ( sft26a[7..7].out, ( sft26a[6..6].out, ( sft26a[5..5].out, ( le9a[0..0].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le4a[3..2].out))))))))))))))))))))))))))));
	sft17a[].in = ( w649w, ( w649w, ( le9a[18..18].out, ( le9a[17..17].out, ( le9a[16..16].out, ( sft26a[19..19].out, ( sft26a[18..18].out, ( sft26a[17..17].out, ( sft26a[16..16].out, ( sft26a[15..15].out, ( sft38a[2..2].out, ( sft30a[11..11].out, ( sft30a[10..10].out, ( sft30a[9..9].out, ( sft30a[8..8].out, ( sft30a[7..7].out, ( sft30a[6..6].out, ( sft30a[5..5].out, ( sft30a[4..4].out, ( sft30a[3..3].out, ( sft26a[4..4].out, ( sft26a[3..3].out, ( sft26a[2..2].out, ( sft26a[1..1].out, ( sft26a[0..0].out, ( le5a[3..3].out, ( le5a[2..2].out, ( w649w, cs2a[1].sout))))))))))))))))))))))))))));
	sft18a[].in = add15_result[];
	sft20a[].in = ( w649w, ( w615w, ( w615w, ( (! w442w[18..18]), ( le9a[15..15].out, ( le9a[14..14].out, ( le9a[13..13].out, ( sft38a[4..4].out, ( sft38a[3..3].out, ( sft30a[12..12].out, ( sft34a[8..8].out, ( sft34a[7..7].out, ( le10a[6..6].out, ( le10a[5..5].out, ( le10a[4..4].out, ( le10a[3..3].out, ( le10a[2..2].out, ( le10a[1..1].out, ( le10a[0..0].out, ( le8a[2..2].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le4a[5..5].out, cs2a[2].sout)))))))))))))))))))))))));
	sft21a[].in = ( w649w, ( w649w, ( w649w, ( sft26a[20..20].out, ( le8a[17..17].out, ( sft38a[6..6].out, ( sft38a[5..5].out, ( sft30a[14..14].out, ( sft30a[13..13].out, ( sft34a[9..9].out, ( sft38a[1..1].out, ( sft38a[0..0].out, ( sft34a[6..6].out, ( sft34a[5..5].out, ( sft34a[4..4].out, ( sft34a[3..3].out, ( sft34a[2..2].out, ( sft34a[1..1].out, ( sft34a[0..0].out, ( sft30a[2..2].out, ( sft30a[1..1].out, ( sft30a[0..0].out, ( le5a[5..5].out, ( le5a[4..4].out, ( w649w, le4a[4..4].out)))))))))))))))))))))))));
	sft22a[].in = add19_result[];
	sft24a[].in = ( w649w, ( w615w, ( le8a[16..16].out, ( le8a[15..15].out, ( le9a[12..12].out, ( le9a[11..11].out, ( le10a[9..9].out, ( le10a[8..8].out, ( le10a[7..7].out, ( le9a[7..7].out, ( le9a[6..6].out, ( le9a[5..5].out, ( le9a[4..4].out, ( le9a[3..3].out, ( le9a[2..2].out, ( le9a[1..1].out, ( le7a[4..4].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le4a[7..6].out))))))))))))))))))));
	sft25a[].in = ( w649w, ( w649w, ( (! w370w[18..18]), ( le7a[17..17].out, ( le8a[14..14].out, ( le8a[13..13].out, ( le9a[10..10].out, ( le9a[9..9].out, ( le9a[8..8].out, ( le8a[9..9].out, ( le8a[8..8].out, ( le8a[7..7].out, ( le8a[6..6].out, ( le8a[5..5].out, ( le8a[4..4].out, ( le8a[3..3].out, ( le6a[6..6].out, ( le5a[7..7].out, ( le5a[6..6].out, ( w649w, cs2a[3].sout))))))))))))))))))));
	sft26a[].in = add23_result[];
	sft28a[].in = ( w649w, ( w615w, ( le6a[16..16].out, ( le8a[11..11].out, ( le8a[10..10].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le5a[8..8].out, ( le4a[9..9].out, cs2a[4].sout))))))))))))));
	sft29a[].in = ( w649w, ( w649w, ( (! w241w[18..18]), ( le7a[13..13].out, ( le7a[12..12].out, ( le6a[13..13].out, ( le6a[12..12].out, ( le6a[11..11].out, ( le6a[10..10].out, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le4a[10..10].out, ( w649w, le4a[8..8].out))))))))))))));
	sft30a[].in = add27_result[];
	sft32a[].in = ( w649w, ( le6a[15..15].out, ( le6a[14..14].out, ( le5a[15..15].out, ( le5a[14..14].out, ( le5a[13..13].out, ( le5a[12..12].out, ( le5a[11..11].out, ( le5a[10..9].out)))))))));
	sft33a[].in = ( w649w, ( le5a[17..17].out, ( le5a[16..16].out, ( le4a[17..17].out, ( le4a[16..16].out, ( le4a[15..15].out, ( le4a[14..14].out, ( le4a[13..13].out, ( le4a[12..11].out)))))))));
	sft34a[].in = add31_result[];
	sft36a[].in = ( w649w, ( w615w, ( le7a[16..16].out, ( le7a[15..15].out, ( le8a[12..12].out, ( w615w, (! w168w[18..18])))))));
	sft37a[].in = ( w649w, ( w649w, ( (! w298w[18..18]), ( le6a[17..17].out, ( le7a[14..14].out, ( w649w, w615w))))));
	sft38a[].in = add35_result[];
	dataa_node[] = ( datab[16..0]);
	datab_node[] = ( dataa[11..0]);
	final_result_node[] = ( w1059w[28..0]);
	result[] = ( final_result_node[28..0]);
	w1059w[] = ( sft14a[31..31].out, sft14a[30..30].out, sft14a[29..29].out, sft14a[28..28].out, sft14a[27..27].out, sft14a[26..26].out, sft14a[25..25].out, sft14a[24..24].out, sft14a[23..23].out, sft14a[22..22].out, sft14a[21..21].out, sft14a[20..20].out, sft14a[19..19].out, sft14a[18..18].out, sft14a[17..17].out, sft14a[16..16].out, sft14a[15..15].out, sft14a[14..14].out, sft14a[13..13].out, sft14a[12..12].out, sft14a[11..11].out, sft14a[10..10].out, sft14a[9..9].out, sft14a[8..8].out, sft14a[7..7].out, sft14a[6..6].out, sft14a[5..5].out, sft14a[4..4].out, sft14a[3..3].out, sft14a[2..2].out, sft14a[1..1].out, sft14a[0..0].out);
	w168w[] = le4a[].out;
	w18w[] = ( B"00", datab_node[]);
	w241w[] = le5a[].out;
	w298w[] = le6a[].out;
	w370w[] = le7a[].out;
	w442w[] = le8a[].out;
	w615w = B"1";
	w649w = B"0";
END;
--VALID FILE
